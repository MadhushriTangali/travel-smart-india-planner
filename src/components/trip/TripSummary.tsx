import { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import { Save, Share, Download, MapPin, Calendar, IndianRupee, Check } from 'lucide-react';
import { TripData } from '@/components/TripPlanningForm';
import { supabase } from '@/integrations/supabase/client';
import { toast } from '@/hooks/use-toast';

interface TripSummaryProps {
  tripData: TripData;
  onSave: () => void;
}

export const TripSummary = ({ tripData, onSave }: TripSummaryProps) => {
  const [tripName, setTripName] = useState(`${tripData.destination} Adventure`);
  const [saving, setSaving] = useState(false);
  const [saved, setSaved] = useState(false);

  const handleSaveTrip = async () => {
    if (!tripName.trim()) {
      toast({
        title: "Trip Name Required",
        description: "Please enter a name for your trip.",
        variant: "destructive"
      });
      return;
    }

    setSaving(true);
    
    try {
      const { data: { user } } = await supabase.auth.getUser();
      
      if (!user) {
        toast({
          title: "Authentication Required",
          description: "Please sign in to save your trip.",
          variant: "destructive"
        });
        return;
      }

      const { error } = await supabase.from('trips').insert({
        user_id: user.id,
        trip_name: tripName,
        source_location: tripData.source_location,
        destination: tripData.destination,
        budget: tripData.budget,
        duration: tripData.duration,
        travel_style: tripData.travel_style,
        notes: tripData.notes,
        trip_data: tripData as any, // Cast to any to satisfy Json type
        total_cost: Math.floor(tripData.budget * 0.85) // Estimated total cost
      });

      if (error) {
        console.error('Error saving trip:', error);
        toast({
          title: "Save Failed",
          description: "Failed to save your trip. Please try again.",
          variant: "destructive"
        });
      } else {
        setSaved(true);
        toast({
          title: "Trip Saved!",
          description: "Your trip has been saved successfully.",
        });
        onSave();
      }
    } catch (error) {
      console.error('Error saving trip:', error);
      toast({
        title: "Save Failed",
        description: "An unexpected error occurred. Please try again.",
        variant: "destructive"
      });
    } finally {
      setSaving(false);
    }
  };

  const handleShareTrip = () => {
    const tripDetails = `
üáÆüá≥ TravelSmart Trip Plan
üìç ${tripData.source_location} ‚Üí ${tripData.destination}
üí∞ Budget: ‚Çπ${tripData.budget.toLocaleString()}
‚è±Ô∏è Duration: ${tripData.duration}
üéØ Style: ${tripData.travel_style}

Plan your Indian adventure with TravelSmart!
    `.trim();

    if (navigator.share) {
      navigator.share({
        title: `${tripData.destination} Trip Plan`,
        text: tripDetails,
      });
    } else {
      navigator.clipboard.writeText(tripDetails);
      toast({
        title: "Copied to Clipboard",
        description: "Trip details copied to clipboard!",
      });
    }
  };

  const handleDownloadSummary = () => {
    const tripSummary = `
TRAVEL SMART - TRIP SUMMARY
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

Trip Name: ${tripName}
Source: ${tripData.source_location}
Destination: ${tripData.destination}
Budget: ‚Çπ${tripData.budget.toLocaleString()}
Duration: ${tripData.duration}
Travel Style: ${tripData.travel_style}

Notes: ${tripData.notes || 'None'}

Generated by TravelSmart - Your AI Travel Companion
    `.trim();

    const blob = new Blob([tripSummary], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${tripName.replace(/\s+/g, '_')}_Summary.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    toast({
      title: "Download Complete",
      description: "Trip summary downloaded successfully!",
    });
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Check className="h-5 w-5 text-green-500" />
          Trip Summary & Save
        </CardTitle>
        <p className="text-gray-600">
          Review your trip details and save for future reference
        </p>
      </CardHeader>
      <CardContent className="space-y-6">
        {/* Save Trip Name */}
        <Card className="border-2 border-blue-200">
          <CardContent className="p-4">
            <div className="space-y-3">
              <Label htmlFor="tripName">Give your trip a name</Label>
              <Input
                id="tripName"
                value={tripName}
                onChange={(e) => setTripName(e.target.value)}
                placeholder="e.g., Amazing Goa Adventure"
                className="text-lg"
              />
            </div>
          </CardContent>
        </Card>

        {/* Trip Overview */}
        <Card>
          <CardHeader>
            <CardTitle className="text-lg">Trip Overview</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid md:grid-cols-2 gap-6">
              <div className="space-y-4">
                <div className="flex items-center gap-3">
                  <MapPin className="h-5 w-5 text-orange-500" />
                  <div>
                    <p className="text-sm text-gray-600">From</p>
                    <p className="font-semibold">{tripData.source_location}</p>
                  </div>
                </div>
                
                <div className="flex items-center gap-3">
                  <MapPin className="h-5 w-5 text-blue-500" />
                  <div>
                    <p className="text-sm text-gray-600">To</p>
                    <p className="font-semibold">{tripData.destination}</p>
                  </div>
                </div>
                
                <div className="flex items-center gap-3">
                  <Calendar className="h-5 w-5 text-green-500" />
                  <div>
                    <p className="text-sm text-gray-600">Duration</p>
                    <p className="font-semibold">{tripData.duration || 'Not specified'}</p>
                  </div>
                </div>
              </div>
              
              <div className="space-y-4">
                <div className="flex items-center gap-3">
                  <IndianRupee className="h-5 w-5 text-purple-500" />
                  <div>
                    <p className="text-sm text-gray-600">Budget</p>
                    <p className="font-semibold text-xl">‚Çπ{tripData.budget.toLocaleString()}</p>
                  </div>
                </div>
                
                <div>
                  <p className="text-sm text-gray-600 mb-1">Travel Style</p>
                  <Badge className="bg-gradient-to-r from-orange-500 to-blue-600">
                    {tripData.travel_style || 'Not specified'}
                  </Badge>
                </div>
              </div>
            </div>
            
            {tripData.notes && (
              <div className="mt-6 p-4 bg-gray-50 rounded-lg">
                <p className="text-sm text-gray-600 mb-1">Additional Notes</p>
                <p className="text-gray-800">{tripData.notes}</p>
              </div>
            )}
          </CardContent>
        </Card>

        {/* Trip Highlights */}
        <Card>
          <CardHeader>
            <CardTitle className="text-lg">What's Included in Your Plan</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <div className="flex items-center gap-2">
                  <Check className="h-4 w-4 text-green-500" />
                  <span className="text-sm">Hotel recommendations within budget</span>
                </div>
                <div className="flex items-center gap-2">
                  <Check className="h-4 w-4 text-green-500" />
                  <span className="text-sm">Top tourist attractions</span>
                </div>
                <div className="flex items-center gap-2">
                  <Check className="h-4 w-4 text-green-500" />
                  <span className="text-sm">Famous local dishes guide</span>
                </div>
              </div>
              <div className="space-y-2">
                <div className="flex items-center gap-2">
                  <Check className="h-4 w-4 text-green-500" />
                  <span className="text-sm">Cultural insights & traditions</span>
                </div>
                <div className="flex items-center gap-2">
                  <Check className="h-4 w-4 text-green-500" />
                  <span className="text-sm">Transport options comparison</span>
                </div>
                <div className="flex items-center gap-2">
                  <Check className="h-4 w-4 text-green-500" />
                  <span className="text-sm">Detailed cost breakdown</span>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Action Buttons */}
        <div className="flex flex-col sm:flex-row gap-3">
          <Button 
            onClick={handleSaveTrip} 
            disabled={saving || saved}
            className="flex-1 bg-gradient-to-r from-green-500 to-green-600"
          >
            <Save className="mr-2 h-4 w-4" />
            {saved ? 'Trip Saved!' : saving ? 'Saving...' : 'Save Trip'}
          </Button>
          
          <Button 
            onClick={handleShareTrip} 
            variant="outline"
            className="flex-1"
          >
            <Share className="mr-2 h-4 w-4" />
            Share Trip
          </Button>
          
          <Button 
            onClick={handleDownloadSummary} 
            variant="outline"
            className="flex-1"
          >
            <Download className="mr-2 h-4 w-4" />
            Download Summary
          </Button>
        </div>

        {saved && (
          <div className="p-4 bg-green-50 border border-green-200 rounded-lg">
            <div className="flex items-center gap-2">
              <Check className="h-5 w-5 text-green-600" />
              <p className="text-green-800 font-medium">
                Trip saved successfully! You can view it in "My Trips" section.
              </p>
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  );
};
